"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[9641],{9189:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>m,frontMatter:()=>d,metadata:()=>a,toc:()=>u});const a=JSON.parse('{"id":"api/context/api-context-extend","title":"extend","description":"Overview","source":"@site/docs/api/context/extend.md","sourceDirName":"api/context","slug":"/api/context/api-context-extend","permalink":"/docusaurus/api/context/api-context-extend","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/api/context/extend.md","tags":[],"version":"current","frontMatter":{"id":"api-context-extend","title":"extend"},"sidebar":"apiSidebar","previous":{"title":"find","permalink":"/docusaurus/api/context/api-context-find"},"next":{"title":"get","permalink":"/docusaurus/api/context/api-context-get"}}');var i=t(4848),r=t(8453),l=t(5537),s=t(9329);const d={id:"api-context-extend",title:"extend"},o=void 0,c={},u=[{value:"Overview",id:"overview",level:2},{value:"Parameters",id:"parameters",level:2},{value:"Return Value",id:"return-value",level:2},{value:"Usage Example",id:"usage-example",level:2},{value:"Example with manifest",id:"example-with-manifest",level:3},{value:"Example with metadata",id:"example-with-metadata",level:3},{value:"Example with props",id:"example-with-props",level:3}];function x(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,i.jsx)(n.p,{children:"Extends the current context with new properties and manifest, while keeping the existing metadata."}),"\n",(0,i.jsx)(n.h2,{id:"parameters",children:"Parameters"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"props"})})," - (object) The properties to include in the extended context. See ",(0,i.jsx)(n.a,{href:"#example-with-props",children:"props"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"manifest"})})," - (array) The manifest to include in the extended context. See ",(0,i.jsx)(n.a,{href:"#example-with-manifest",children:"manifest"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"metadata"})})," - (object) The metadata to merge with the existing metadata in the context. See ",(0,i.jsx)(n.a,{href:"#example-with-metadata",children:"metadata"}),"."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"return-value",children:"Return Value"}),"\n",(0,i.jsx)(n.p,{children:"Returns a new context object with the extended properties, manifest, and merged metadata."}),"\n",(0,i.jsx)(n.h2,{id:"usage-example",children:"Usage Example"}),"\n",(0,i.jsxs)(l.A,{children:[(0,i.jsx)(s.A,{value:"jsonnet",label:"Jsonnet",default:!0,children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"local ctx = import '../../vendor/konn/context.libsonnet';\n\nlocal initialCtx = ctx.new(\n  props={\n    env: 'production',\n  },\n  manifest=[\n    {\n      kind: 'Deployment',\n      metadata: {\n        name: 'nginx',\n      },\n    },\n  ]);\n\n// Extend the context with additional props\nlocal extendedCtx = initialCtx.extend(\n  props={\n    version: '1.0',\n  });\n\n{\n  initialProps: initialCtx.args.props,\n  extendedProps: extendedCtx.args.props,\n}\n"})})}),(0,i.jsx)(s.A,{value:"yaml",label:"YAML Output",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"initialProps:\n  env: production\nextendedProps:\n  env: production\n  version: 1.0\n"})})}),(0,i.jsx)(s.A,{value:"json",label:"JSON Output",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "initialProps": {\n    "env": "production"\n  },\n  "extendedProps": {\n    "env": "production",\n    "version": "1.0"\n  }\n}\n'})})})]}),"\n",(0,i.jsx)(n.h3,{id:"example-with-manifest",children:"Example with manifest"}),"\n",(0,i.jsxs)(l.A,{children:[(0,i.jsx)(s.A,{value:"jsonnet",label:"Jsonnet",default:!0,children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"local ctx = import '../../vendor/konn/context.libsonnet';\n\nlocal initialCtx = ctx.new(\n  props={},\n  manifest=[\n    {\n      kind: 'Deployment',\n      metadata: {\n        name: 'nginx',\n      },\n    },\n  ],\n  metadata={}\n);\n\n// Extend the context with additional manifest\nlocal extendedCtx = initialCtx.extend(\n  manifest=[\n    {\n      kind: 'Service',\n      metadata: {\n        name: 'nginx-service',\n      },\n    },\n  ]\n);\n\n{\n  initialManifest: initialCtx.args.manifest,\n  extendedManifest: extendedCtx.args.manifest,\n}\n"})})}),(0,i.jsx)(s.A,{value:"yaml",label:"YAML Output",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"initialManifest:\n  - kind: Deployment\n    metadata:\n      name: nginx\nextendedManifest:\n  - kind: Deployment\n    metadata:\n      name: nginx\n  - kind: Service\n    metadata:\n      name: nginx-service\n"})})}),(0,i.jsx)(s.A,{value:"json",label:"JSON Output",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "initialManifest": [\n    {\n      "kind": "Deployment",\n      "metadata": {\n        "name": "nginx"\n      }\n    }\n  ],\n  "extendedManifest": [\n    {\n      "kind": "Deployment",\n      "metadata": {\n        "name": "nginx"\n      }\n    },\n    {\n      "kind": "Service",\n      "metadata": {\n        "name": "nginx-service"\n      }\n    }\n  ]\n}\n'})})})]}),"\n",(0,i.jsx)(n.h3,{id:"example-with-metadata",children:"Example with metadata"}),"\n",(0,i.jsxs)(l.A,{children:[(0,i.jsx)(s.A,{value:"jsonnet",label:"Jsonnet",default:!0,children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"local ctx = import '../../vendor/konn/context.libsonnet';\n\nlocal initialCtx = ctx.new(\n  props={},\n  manifest=[\n    {\n      kind: 'Deployment',\n      metadata: {\n        name: 'nginx',\n      },\n    },\n  ],\n  metadata={\n    profile: 'dev',\n  }\n);\n\n// Extend the context with additional metadata\nlocal extendedCtx = initialCtx.extend(\n  metadata={\n    environment: 'staging',\n  }\n);\n\n{\n  initialMetadata: initialCtx.args.metadata,\n  extendedMetadata: extendedCtx.args.metadata,\n}\n"})})}),(0,i.jsx)(s.A,{value:"yaml",label:"YAML Output",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"initialMetadata:\n  profile: dev\nextendedMetadata:\n  profile: dev\n  environment: staging\n"})})}),(0,i.jsx)(s.A,{value:"json",label:"JSON Output",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "initialMetadata": {\n    "profile": "dev"\n  },\n  "extendedMetadata": {\n    "profile": "dev",\n    "environment": "staging"\n  }\n}\n'})})})]}),"\n",(0,i.jsx)(n.h3,{id:"example-with-props",children:"Example with props"}),"\n",(0,i.jsxs)(l.A,{children:[(0,i.jsx)(s.A,{value:"jsonnet",label:"Jsonnet",default:!0,children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"local ctx = import '../../vendor/konn/context.libsonnet';\n\nlocal initialCtx = ctx.new(\n  props={},\n  manifest=[\n    {\n      kind: 'Deployment',\n      metadata: {\n        name: 'nginx',\n      },\n    },\n  ],\n  metadata={\n    profile: 'dev',\n  }\n);\n\n// Extend the context with additional props, manifest, and metadata\nlocal extendedCtx = initialCtx.extend(\n  props={},\n  manifest=[\n    {\n      kind: 'Service',\n      metadata: {\n        name: 'nginx-service',\n      },\n    },\n  ],\n  metadata={\n    environment: 'staging',\n  }\n);\n\n{\n  initialManifest: initialCtx.args.manifest,\n  extendedManifest: extendedCtx.args.manifest,\n  extendedMetadata: extendedCtx.args.metadata,\n}\n"})})}),(0,i.jsx)(s.A,{value:"yaml",label:"YAML Output",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"initialManifest:\n  - kind: Deployment\n    metadata:\n      name: nginx\nextendedManifest:\n  - kind: Deployment\n    metadata:\n      name: nginx\n  - kind: Service\n    metadata:\n      name: nginx-service\nextendedMetadata:\n  environment: staging\n  profile: dev\n"})})}),(0,i.jsx)(s.A,{value:"json",label:"JSON Output",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "initialManifest": [\n    {\n      "kind": "Deployment",\n      "metadata": {\n        "name": "nginx"\n      }\n    }\n  ],\n  "extendedManifest": [\n    {\n      "kind": "Deployment",\n      "metadata": {\n        "name": "nginx"\n      }\n    },\n    {\n      "kind": "Service",\n      "metadata": {\n        "name": "nginx-service"\n      }\n    }\n  ],\n  "extendedMetadata": {\n    "environment": "staging",\n    "profile": "dev"\n  }\n}\n'})})})]})]})}function m(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(x,{...e})}):x(e)}},9329:(e,n,t)=>{t.d(n,{A:()=>l});t(6540);var a=t(4164);const i={tabItem:"tabItem_Ymn6"};var r=t(4848);function l(e){let{children:n,hidden:t,className:l}=e;return(0,r.jsx)("div",{role:"tabpanel",className:(0,a.A)(i.tabItem,l),hidden:t,children:n})}},5537:(e,n,t)=>{t.d(n,{A:()=>y});var a=t(6540),i=t(4164),r=t(5627),l=t(6347),s=t(372),d=t(604),o=t(1861),c=t(8749);function u(e){return a.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,a.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function x(e){const{values:n,children:t}=e;return(0,a.useMemo)((()=>{const e=n??function(e){return u(e).map((e=>{let{props:{value:n,label:t,attributes:a,default:i}}=e;return{value:n,label:t,attributes:a,default:i}}))}(t);return function(e){const n=(0,o.XI)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function m(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function p(e){let{queryString:n=!1,groupId:t}=e;const i=(0,l.W6)(),r=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,d.aZ)(r),(0,a.useCallback)((e=>{if(!r)return;const n=new URLSearchParams(i.location.search);n.set(r,e),i.replace({...i.location,search:n.toString()})}),[r,i])]}function h(e){const{defaultValue:n,queryString:t=!1,groupId:i}=e,r=x(e),[l,d]=(0,a.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!m({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const a=t.find((e=>e.default))??t[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:n,tabValues:r}))),[o,u]=p({queryString:t,groupId:i}),[h,f]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[i,r]=(0,c.Dv)(t);return[i,(0,a.useCallback)((e=>{t&&r.set(e)}),[t,r])]}({groupId:i}),v=(()=>{const e=o??h;return m({value:e,tabValues:r})?e:null})();(0,s.A)((()=>{v&&d(v)}),[v]);return{selectedValue:l,selectValue:(0,a.useCallback)((e=>{if(!m({value:e,tabValues:r}))throw new Error(`Can't select invalid tab value=${e}`);d(e),u(e),f(e)}),[u,f,r]),tabValues:r}}var f=t(9136);const v={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var g=t(4848);function j(e){let{className:n,block:t,selectedValue:a,selectValue:l,tabValues:s}=e;const d=[],{blockElementScrollPositionUntilNextRender:o}=(0,r.a_)(),c=e=>{const n=e.currentTarget,t=d.indexOf(n),i=s[t].value;i!==a&&(o(n),l(i))},u=e=>{let n=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const t=d.indexOf(e.currentTarget)+1;n=d[t]??d[0];break}case"ArrowLeft":{const t=d.indexOf(e.currentTarget)-1;n=d[t]??d[d.length-1];break}}n?.focus()};return(0,g.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.A)("tabs",{"tabs--block":t},n),children:s.map((e=>{let{value:n,label:t,attributes:r}=e;return(0,g.jsx)("li",{role:"tab",tabIndex:a===n?0:-1,"aria-selected":a===n,ref:e=>{d.push(e)},onKeyDown:u,onClick:c,...r,className:(0,i.A)("tabs__item",v.tabItem,r?.className,{"tabs__item--active":a===n}),children:t??n},n)}))})}function b(e){let{lazy:n,children:t,selectedValue:r}=e;const l=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=l.find((e=>e.props.value===r));return e?(0,a.cloneElement)(e,{className:(0,i.A)("margin-top--md",e.props.className)}):null}return(0,g.jsx)("div",{className:"margin-top--md",children:l.map(((e,n)=>(0,a.cloneElement)(e,{key:n,hidden:e.props.value!==r})))})}function w(e){const n=h(e);return(0,g.jsxs)("div",{className:(0,i.A)("tabs-container",v.tabList),children:[(0,g.jsx)(j,{...n,...e}),(0,g.jsx)(b,{...n,...e})]})}function y(e){const n=(0,f.A)();return(0,g.jsx)(w,{...e,children:u(e.children)},String(n))}},8453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>s});var a=t(6540);const i={},r=a.createContext(i);function l(e){const n=a.useContext(r);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),a.createElement(r.Provider,{value:n},e.children)}}}]);